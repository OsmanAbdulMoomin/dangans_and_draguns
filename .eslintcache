[{"/mnt/c/Users/oabdu/React/dangans-and-dragons/gradgame/src/ui/homePage.js":"1","/mnt/c/Users/oabdu/React/dangans-and-dragons/gradgame/src/App.js":"2","/mnt/c/Users/oabdu/React/dangans-and-dragons/gradgame/src/reportWebVitals.js":"3","/mnt/c/Users/oabdu/React/dangans-and-dragons/gradgame/src/index.js":"4","/mnt/c/Users/oabdu/React/dangans-and-dragons/gradgame/src/ui/HomePage.js":"5","/mnt/c/Users/oabdu/React/dangans-and-dragons/gradgame/src/game/Room.js":"6","/mnt/c/Users/oabdu/dangans-and-draguns/dangans_and_draguns/src/game/Room.js":"7","/mnt/c/Users/oabdu/dangans-and-draguns/dangans_and_draguns/src/App.js":"8","/mnt/c/Users/oabdu/dangans-and-draguns/dangans_and_draguns/src/ui/HomePage.js":"9","/mnt/c/Users/oabdu/dangans-and-draguns/dangans_and_draguns/src/hooks/useViewport.js":"10"},{"size":1693,"mtime":1608223714733,"results":"11","hashOfConfig":"12"},{"size":587,"mtime":1608650736936,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1608208721397,"results":"14","hashOfConfig":"12"},{"size":500,"mtime":1608208721374,"results":"15","hashOfConfig":"12"},{"size":1596,"mtime":1608655505917,"results":"16","hashOfConfig":"12"},{"size":3932,"mtime":1608656051140,"results":"17","hashOfConfig":"12"},{"size":11939,"mtime":1609000677025,"results":"18","hashOfConfig":"19"},{"size":662,"mtime":1608994608473,"results":"20","hashOfConfig":"19"},{"size":1390,"mtime":1608986800235,"results":"21","hashOfConfig":"19"},{"size":711,"mtime":1608990426188,"results":"22","hashOfConfig":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"47cpb0",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"ouosri",{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/oabdu/React/dangans-and-dragons/gradgame/src/ui/homePage.js",["44","45","46","47","48"],"/mnt/c/Users/oabdu/React/dangans-and-dragons/gradgame/src/App.js",["49"],"/mnt/c/Users/oabdu/React/dangans-and-dragons/gradgame/src/reportWebVitals.js",[],"/mnt/c/Users/oabdu/React/dangans-and-dragons/gradgame/src/index.js",[],"/mnt/c/Users/oabdu/React/dangans-and-dragons/gradgame/src/ui/HomePage.js",[],"/mnt/c/Users/oabdu/React/dangans-and-dragons/gradgame/src/game/Room.js",["50","51"],"/mnt/c/Users/oabdu/dangans-and-draguns/dangans_and_draguns/src/game/Room.js",["52","53","54","55"],"import React, {useState, useEffect, useRef} from 'react';\n\nimport useViewport from \"../hooks/useViewport\";\n\nimport socketIOClient from 'socket.io-client';\n\nimport {\n  Box,\n  Button,\n  Container,\n  Grid,\n  Paper,\n  List,\n  ListItem,\n  TextField,\n  Typography\n} from '@material-ui/core';\n\nimport \"./Room.css\";\n\n\nconst Room = (props) => {\n  //Get Room ID\n  console.log(`my props are : ${props}`);\n  const { roomname } = props.match.params;\n  const {userName} = props.location.state;\n\n  const {width, height} = useViewport();\n  /////////////////////////////////////\n  const NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\"\n  const NEW_USER_EVENT =\"newUser\"\n  ///////////SOCKET URL////////////////\n  const SOCKET_SERVER_URL = \"http://localhost:4000\";\n  ////////////////////////////////////\n  const [messages, setMessages] = useState([]); //messages\n  const [users, setUsers] = useState([]);\n  ////////////////////////////////////\n  const socketRef = useRef(); //use a reference to the socket rather than the socket\n  \n  useEffect(() =>{  \n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {roomname},\n    });\n\n     socketRef.current.emit(NEW_USER_EVENT, userName )\n\n\n    }, [roomname]);\n\n \n  console.log(roomname)\n  console.log(`my username is : ${userName}`);\n\n  //Manages Messaging - Opens Websocket\n\n  \n  \n \n\n  //Message to be sent\n  const [newMessage, setNewMessage] = useState(\"\")\n  \n \n\n    const handleNewMessageChange = (event) => {\n      setNewMessage(event.target.value);\n    }\n    //////////////HANDLES SENDING MESSAGE TO WEBSOCKET\n     const sendMessage = (messageBody) =>\n     \n    {\n      messageBody !== \"\" ? \n      socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, \n      {\n      user: userName,\n      body: messageBody,\n      senderId: socketRef.current.id,\n      })\n      :\n      alert(\"Cannot be empty\");\n    };\n\n    const handleMessageSend = () => {\n      sendMessage(newMessage);\n      setNewMessage(\"\");\n    };\n\n    \n\n \n  useEffect(() => { \n  //create WebSocket\n  socketRef.current.on('login', data =>{\n  console.log(data)\n  var currentUsers = [];\n  for(let value of Object.values(data.users)){\n    currentUsers.push(value);\n  }\n  setUsers(currentUsers)\n  console.log(users)\n// setUsers(users => [...users, data.users]);\n} )\n\nsocketRef.current.on('update', (data)=>{\n  var currentUsers = [];\n  for(let value of Object.values(data)){\n    currentUsers.push(value);\n  }\n  setUsers(currentUsers)\n  console.log(users)\n\n})\n   \n   \n  //message listener\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, message => {\n    const incomingMessage ={\n      ...message,\n      ownedByCurrentUser: message.senderId === socketRef.current.id,\n    };\n   \n    setMessages(messages => [...messages, incomingMessage]);\n  });\n\n  // socketRef.current.on(USERNAME, username =>{\n  //   const\n  // })\n\n  //cleanup, remove socket if connection closes\n    return () =>{\n    socketRef.current.disconnect();\n  };\n   }, [roomname]);\n\n\n//       return (\n//       <Container>\n//       <Box className=\"chat-room-container\" style={{border:\" 3px solid red\"}}>\n//       <Grid container xs ={12} direction=\"column\">\n//       <Grid item xs={12} fullWidth direction=\"row\">\n//       <Typography variant=\"h1\" className=\"room-name\" fullWidth>\n//       Room : {roomname}\n//       </Typography>\n//       </Grid>\n//       <Grid className=\"messages-container\" item xs={12} style={{marginLeft: \"0\" }} alignItems=\"bottom\">\n      \n//       <List className=\"message-list\">\n//       {messages.map((message, i) => (\n//         <ListItem key={i}\n//         className={`message-item ${message.ownedByCurrentUser ? \"my-message\" : \"received-message\"}`}>\n//         {`${message.user} : ${message.body}`}\n//         </ListItem>\n//       ))} \n//       </List>\n//      <Grid item style={{marginBottom :\"0\"}}>\n//      <TextField\n//       value={newMessage}\n//       onChange={handleNewMessageChange}\n//       placeholder=\"Write message...\"\n//       className=\"new-message-field\"\n//       variant=\"outlined\"\n//       fullWidth/>\n\n//       <Button onClick={handleMessageSend} className=\"send-message-button\" fullWidth  variant=\"contained\" color=\"primary\">\n//       Send\n//       </Button>\n//       </Grid>\n// </Grid>\n// <Grid item xs={12}>\n//        <Box className=\"messages-container\">\n//       <List className=\"message-list\">\n//       {users.map((user, i) => (\n//         <ListItem key={i}\n//         className={`message-item ${ \"received-message\"}`} style={{color :\"black\"}}>\n//         {user}\n//         </ListItem>\n//       ))}\n//       </List>\n//       </Box>\n     \n     \n//       <Button onClick={()=>{console.log(users) }}>users? </Button></Grid>\n//       </Grid>\n//       </Box>\n      \n//       </Container>\n//       );\n\n//       return (\n//       <Grid xs={12} container component=\"container\" style={{border :\"8px solid red\", height : height, width : width}} direction=\"column-reverse\">\n    \n//        <Grid item container xs={4} component=\"Box\" style={{marginBottom: \"auto\", border :\"8px solid yellow\", height : height}} fullWidth>\n      //   <List className=\"message-list\" fullWidth>\n      //  {messages.map((message, i) => (\n      //    <ListItem key={i}\n      //    className={`message-item ${message.ownedByCurrentUser ? \"my-message\" : \"received-message\"}`} >\n      //    <Typography variant=\"body1\" fullWidth>\n      //    {`${message.user} : ${message.body}`}\n      //    </Typography>\n      //    </ListItem>\n      //  ))} \n      //  </List>\n//          <Grid item container direction=\"column\" style={{border: \"8px solid blue \",marginTop :\"auto\"}}>\n//            <Grid item style={{border : \"8px solid green\" ,marginBottom :\"auto\"}}>\n      //     <TextField\n      //  value={newMessage}\n      //  onChange={handleNewMessageChange}\n      //  placeholder=\"Write message...\"\n      //  className=\"new-message-field\"\n      //  variant=\"outlined\"\n      //  fullWidth/>\n\n      \n           \n        \n//       </Grid>\n//              <Grid item style={{border : \"8px solid green\" ,marginBottom :\"auto\"}}>\n//               <Button onClick={handleMessageSend} className=\"send-message-button\" fullWidth  variant=\"contained\" color=\"primary\">\n//        Send\n//        </Button>\n//       </Grid>\n\n     \n//       </Grid>\n\n//       </Grid>\n//       <Grid item xs={4} component=\"Box\" style={{marginBottom: \"0\", border :\"8px solid yellow\"}}>\n\n//       </Grid>\n//       <Grid item container xs={4} component=\"Box\" style={{marginBottom: \"auto\", border :\"8px solid yellow\", height : height}} fullWidth>\n      //  <List className=\"message-list\" fullWidth>\n      //  {users.map((user, i) => (\n      //    <ListItem key={i}\n      //    className={`message-item ${ \"received-message\"}`} style={{color :\"black\"}}>\n      //    <Typography variant=\"body1\" fullWidth>\n      //    {user}\n      //    </Typography>\n      //    </ListItem>\n      //  ))}\n      //  </List>\n                \n\n//       </Grid>\n//  <Grid item xs={4} component=\"Box\" style={{marginBottom: \"0\", border :\"8px solid yellow\"}}>\n\n//       </Grid>\n//       <Grid xs={12} item direction=\"row\"  style={{height : \"100%\", width :\"auto\",  border :\"8px solid black\", marginLeft :\"0\"}}>\n//       <Paper variant=\"outlined\" onCLick={(event)=>{console.log (event.target.value)}} >\n//       </Paper>\n\n//       </Grid>\n    \n//       </Grid> \n//       );\n\n  return (  \n  <Grid id = \"room-container\" container xs = {12} style = {{border : \"2px solid red\", height : height}}>\n    <Grid id = \"social-interaction-container\" item container xs = {4} style = {{border : \"2px solid yellow\", height : height}}>\n      <Grid id = \"room-player-message-container\" direction = \"column\" item container xs = {12} style = {{border : \"2px solid green\", height : height}}>\n      <Grid item xs = {2} style = {{border : \"2px solid pink\", maxWidth : \"100%\"}}  zeroMinWidth>\n      <Box flexGrow={1}>\n        <Typography variant = \"h2\" > {`Room : ${roomname}`} </Typography> \n        </Box>\n      </Grid>\n       <Grid item xs={5} style = {{border : \"2px solid pink\", maxWidth : \"100%\"}}>\n          <List className=\"message-list\" fullWidth>\n       {users.map((user, i) => (\n         <ListItem key={i}\n         className = \"message-item player\" style={{color :\"black\"}}>\n          <Typography variant=\"body1\" fullWidth> {user} </Typography>\n         </ListItem>\n       ))}\n          </List>\n\n       </Grid>\n\n       <Grid direction = \"column\" item container xs={5} style = {{border : \"2px solid pink\", maxWidth : \"100%\"}}>\n        <Grid item xs = {8} style={{maxWidth : \"100%\" , maxHeight: \"100%\"}}>\n\n          <List className=\"message-list\" fullWidth>\n       {messages.map((message, i) => (\n         <ListItem key={i}\n         className={`message-item ${message.ownedByCurrentUser ? \"my-message\" : \"received-message\"}`} >\n         <Typography variant=\"body1\" fullWidth> {`${message.user} : ${message.body}`} </Typography>\n         </ListItem>\n       ))} \n          </List>\n\n        </Grid>\n        <Grid direction=\"column\" item container xs = {4} style = {{border : \"2px solid pink\", maxWidth : \"100%\"}}>\n          <Grid item xs ={6} style = {{border : \"2px solid pink\", maxWidth : \"100%\"}}> \n            <TextField value={newMessage} onChange={handleNewMessageChange} placeholder=\"Write message...\" className=\"new-message-field\" variant=\"outlined\" fullWidth/>\n          </Grid>\n          <Grid item xs ={6} style = {{border : \"2px solid pink\", maxWidth : \"100%\", maxHeight :\"100%\"}}> \n            <Button onClick={handleMessageSend}  fullWidth  variant=\"contained\" color=\"primary\" size = \"large\">\n            Send\n            </Button>\n          </Grid>\n        </Grid>\n       </Grid>\n  \n    </Grid>\n    </Grid>\n      <Grid item  alignItems=\"center\" xs = {8} style = {{border : \"2px solid pink\", maxWidth : \"100%\", maxHeight :\"100%\"}} >\n        <Paper style = {{border : \"2px solid green\", maxWidth : \"100%\", maxHeight :\"100%\", height : \"100%\"}}>\n          <Typography> SPACE FOR MAP </Typography>\n        </Paper>\n      </Grid> \n  \n  \n\n  </Grid> \n  );\n\n}\n\n  \n\n// const clientRef = useRef();\n// const [data, setData] = useState();\n// const [input, setInput] = useState('');\n// const [messageHistory, setMessageHistory] = useState([])\n// useEffect(() => {\n\n//   if(client){\n//     client.onerror = client.onopen = client.onclose = null;\n//     client.close();\n//   }\n//   //crate new client  (port we open the app on);\n//   const client = new WebSocket('ws://localhost:8080');\n  \n//   //add client ref to clientRef();\n//   clientRef.current = client;\n\n//   clientRef.current.onopen = () => {\n//     clientRef.current.send('Connected to server');\n//   }\n\n//   clientRef.current.onerror = (error) => {\n//     console.log('Error' + error)\n//   };\n\n//   clientRef.current.onmessage = (message) => {\n//     messageHistory.push(`${message.data}\\n\\n`)\n//     setData(message.data)\n//   }\n//   //remove socket onclose\n//   clientRef.current.onclose = ( ) =>{\n//     clientRef.current = null;\n//   }\n//   //close socket\n//   return () => clientRef.current.close();\n\n// }, []);\n\n// const handleInputChange = (event) =>{\n  \n//   event.preventDefault();\n//   const input = event.target.value;\n//   console.log(input);\n//   setInput(input);\n// };\n\n// const sendMessage = (input) => {\n//     console.log(input)\n//       clientRef.current.send(input);\n//       input = ''\n// }\n \n\n\n// return(\n \n//   <Container>\n//   <Grid container xs={12}>\n//   <Grid item xs={10}>\n//   <Input onChange={(event=>{handleInputChange(event)})}> </Input>\n//   </Grid>\n//   <Grid item xs={2}>\n//   <Button \n//   id=\"send\"\n//   title=\"Send Message\"\n//   color=\"primary\"\n//   onClick={()=>{\n//     sendMessage(input);\n//   }}>\n//   Send Message\n//   </Button>\n//   </Grid>\n//   </Grid>\n\n//   <Grid container xs = {12} >\n//   <Grid item xs={12}>\n//   <Typography>Responses from server below</Typography>\n//   </Grid>\n//   <Grid item xs ={12}>\n//   <Typography style={{height : \"400px\"}}>\n//   {data}\n//   </Typography>\n//   </Grid>\n//    </Grid>\n\n//   </Container>\n// );}\n\n \n\n\nexport default Room; ","/mnt/c/Users/oabdu/dangans-and-draguns/dangans_and_draguns/src/App.js",["56"],"/mnt/c/Users/oabdu/dangans-and-draguns/dangans_and_draguns/src/ui/HomePage.js",["57","58"],"/mnt/c/Users/oabdu/dangans-and-draguns/dangans_and_draguns/src/hooks/useViewport.js",[],{"ruleId":"59","severity":1,"message":"60","line":1,"column":45,"nodeType":"61","messageId":"62","endLine":1,"endColumn":53},{"ruleId":"59","severity":1,"message":"63","line":5,"column":5,"nodeType":"61","messageId":"62","endLine":5,"endColumn":8},{"ruleId":"59","severity":1,"message":"64","line":16,"column":8,"nodeType":"61","messageId":"62","endLine":16,"endColumn":12},{"ruleId":"59","severity":1,"message":"65","line":18,"column":24,"nodeType":"61","messageId":"62","endLine":18,"endColumn":41},{"ruleId":"66","severity":1,"message":"67","line":41,"column":4,"nodeType":"68","endLine":41,"endColumn":6,"suggestions":"69"},{"ruleId":"59","severity":1,"message":"70","line":1,"column":8,"nodeType":"61","messageId":"62","endLine":1,"endColumn":12},{"ruleId":"59","severity":1,"message":"71","line":1,"column":26,"nodeType":"61","messageId":"62","endLine":1,"endColumn":35},{"ruleId":"59","severity":1,"message":"72","line":34,"column":10,"nodeType":"61","messageId":"62","endLine":34,"endColumn":20},{"ruleId":"59","severity":1,"message":"73","line":10,"column":3,"nodeType":"61","messageId":"62","endLine":10,"endColumn":12},{"ruleId":"59","severity":1,"message":"74","line":28,"column":10,"nodeType":"61","messageId":"62","endLine":28,"endColumn":15},{"ruleId":"66","severity":1,"message":"75","line":48,"column":8,"nodeType":"68","endLine":48,"endColumn":18,"suggestions":"76"},{"ruleId":"66","severity":1,"message":"77","line":135,"column":7,"nodeType":"68","endLine":135,"endColumn":17,"suggestions":"78"},{"ruleId":"59","severity":1,"message":"70","line":1,"column":8,"nodeType":"61","messageId":"62","endLine":1,"endColumn":12},{"ruleId":"59","severity":1,"message":"79","line":15,"column":8,"nodeType":"61","messageId":"62","endLine":15,"endColumn":16},{"ruleId":"59","severity":1,"message":"80","line":15,"column":18,"nodeType":"61","messageId":"62","endLine":15,"endColumn":29},"no-unused-vars","'setState' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'data' is assigned a value but never used.","'setMessageHistory' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'messageHistory'. Either include it or remove the dependency array.","ArrayExpression",["81"],"'logo' is defined but never used.","'useEffect' is defined but never used.","'playerList' is assigned a value but never used.","'Container' is defined but never used.","'width' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userName'. Either include it or remove the dependency array.",["82"],"React Hook useEffect has missing dependencies: 'messages' and 'users'. Either include them or remove the dependency array.",["83"],"'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},"Update the dependencies array to be: [messageHistory]",{"range":"90","text":"91"},"Update the dependencies array to be: [roomname, userName]",{"range":"92","text":"93"},"Update the dependencies array to be: [messages, roomname, users]",{"range":"94","text":"95"},[908,910],"[messageHistory]",[1185,1195],"[roomname, userName]",[2973,2983],"[messages, roomname, users]"]